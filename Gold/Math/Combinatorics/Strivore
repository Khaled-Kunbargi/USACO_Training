#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 

const int m = 1e9+7, N=2e6;
ll fact[N+1], inv[N+1];

ll exp(ll b, ll p){
    b %= m;
    ll res = 1;
    while(p > 0){
        if(p & 1) res = res * b %m;
        b = b * b % m;
        p /= 2;
    }
    return res;
}
ll mod_inv(ll x){return exp(x, m-2);}
ll choose(ll n, ll k){
    return fact[n] * inv[k] % m * inv[n-k] % m;
}

const int ALPHABET = 26;

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    //freopen("cowpatibility.in", "r", stdin);
    //freopen("cowpatibility.out", "w", stdout);

    ll k; cin >> k;
    string s; cin >> s;
    ll n= s.size();
    
    vector <ll> ways{1};
    for(int i=1; i<=k; i++){
        ways.push_back((ways.back() * (n+i-1) % m) * mod_inv(i) % m);
    }
    //for(auto i: ways) cout << i << ' ';
    //cout << "\n";

    ll total=0;
    for(int before_num=0; before_num <= k; before_num++){
        //number of ways for choosing letters of S.
        ll S_ways = ways[before_num];

        //number of ways to make strings after Sn                               
        ll after = exp(26, k-before_num);

        //number of ways before Sn
        ll before = exp(25, before_num);
        total = (total + before * after % m * S_ways % m) % m;
    }
    cout << total;

    return 0;
}  
