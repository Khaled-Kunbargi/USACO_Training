//Method 0:
// O(n log n)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        multiset <int> se;
        for(int i=0; i<k; ++i) se.insert(nums[i]);
        vi ans{*se.rbegin()};
        for(int i=k; i<n; ++i){
            se.erase(se.find(nums[i-k]));
            se.insert(nums[i]);
            ans.pb(*se.rbegin());
        }
        return ans;
    }
};

// Method 1:
// O(n)
/*
Disadvantages: we only store the elements that contribute to the minimum.
i.e: We don't store all the elements of the sliding window.
*/
class Solution {
public:
    deque <int> mx;
    void ad(int x){
        while(!mx.empty() && mx.back() < x) 
            mx.pop_back();
        mx.push_back(x);
    }
    void po(int x){
        if(!mx.empty() && mx.front() == x) 
            mx.pop_front();
    }
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        for(int i=0; i<k; ++i) ad(nums[i]);
        vector<int> ans{mx.front()};
        for(int i=k; i<n; ++i){
            ad(nums[i]);
            po(nums[i-k]);
            ans.push_back(mx.front());
        }   
        return ans;
    }
};
//Method 2: O(n)
/* Description: It is a modification of method 1 where we are able to remove 
elements without knowing which element we have to remove.
*/
class Solution {
public:
    deque <pair<int,int>> mx;
    int cnt_added=0;
    int cnt_removed=0;
    void ad(int x){
        while(!mx.empty() && mx.back().first < x) 
            mx.pop_back();
        mx.push_back({x, cnt_added});
        cnt_added++;
    }
    void po(){
        if(!mx.empty() && mx.front().second == cnt_removed) 
            mx.pop_front();
        cnt_removed++;
    }
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        for(int i=0; i<k; ++i) ad(nums[i]);
        vector<int> ans{mx.front().first};
        for(int i=k; i<n; ++i){
            ad(nums[i]);
            po();
            ans.push_back(mx.front().first);
        }   
        return ans;
    }
};
//Method 3: O(n)
//In this method we can find the mini/maxi in O(1) on average and we store all elements and we 
//can remove without knowing which element we should remove.
class Solution {
public:
    stack <pair<int,int>> s1, s2;
    void ad(int x){
        int maximum = s1.empty() ? x: max(x, s1.top().second);
        s1.push({x, maximum});
    }
    void po(){
        if(s2.empty()){
            while(!s1.empty()){
                int x = s1.top().first;
                s1.pop();
                int maximum = s2.empty() ? x : max(s2.top().second, x);
                s2.push({x, maximum});
            }
        }
        s2.pop();
    }
    int get(){
        if(s1.empty() || s2.empty()){
            return s1.empty() ? s2.top().second : s1.top().second;
        }
        return max(s1.top().second, s2.top().second);
    }
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        for(int i=0; i<k; ++i) ad(nums[i]);
        vector<int> ans{get()};
        for(int i=k; i<n; ++i){
            ad(nums[i]);
            po();
            ans.push_back(get());
        }   
        return ans;
    }
};
