#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 

//That's my solution :).

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("teamwork.in", "r", stdin);
    freopen("teamwork.out", "w", stdout);

    int n, k; cin >> n >> k;
    vector <int> a(n);
    for(int i=0; i<n; i++) cin >> a[i];

    vector <int> dp(n);
    //dp[i]: max sum of skills for the first i cows.

    for(int i=0; i<n; i++){
        int mx = -1, j;
        for(j=i; j > i-k && j >= 0; j--){
            mx = max(mx, a[j]);
            if(j)
                dp[i] = max(dp[i], dp[j-1] + mx * (i-j+1));
            else
                dp[i] = max(dp[i], mx*(i-j+1));
        }
    }
    //for(int i=0; i<n; i++) cout << dp[i] << ' ';
    //cout << "\n";

    cout << dp[n-1];
    return 0;
}  
/* My own solution..
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <ll> vi;
typedef pair <int,int> pi;
#define pb push_back
#define f first
#define s second
#define OO INT_MAX
#define all(x) (x).begin(), (x).end()
#define no cout << "NO\n"
#define yes cout << "YES\n"

const int N = 1e4+10;
int a[N], memo[N];
int n,k; 
int dp(int i){
    if(i>=n) return 0;
    int &ret=memo[i];
    if(ret != 0) return ret;
    int mx=a[i];
    for(int j=i;j<n && j<i+k; ++j){
        mx = max(mx, a[j]);
        ret = max(ret, mx*(j-i+1)+dp(j+1));
    }
    return ret;
}
int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    // freopen("teamwork.in", "r", stdin);
    // freopen("teamwork.out", "w", stdout);        
    cin >> n >> k;
    for(int i=0; i<n; ++i) cin >> a[i];
    cout << dp(0);
    return 0;       
}   
*/
