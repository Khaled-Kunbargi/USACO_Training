#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 

const int mxDays = 1000;

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("time.in", "r", stdin);
    freopen("time.out", "w", stdout);

    int n, m, c; cin >> n >> m >> c;
    int earn[n];
    for(int i=0; i<n; i++) cin >> earn[i];

    vector <vector <int>> adj(n);

    for(int i=0; i<m; i++){
        int a, b; cin >> a >> b;
        adj[--a].push_back(--b);
    }

    vector<vector<int>> dp(mxDays+1, vector<int>(n, -1));

    dp[0][0] = 0;
    int ans = 0;
    for(int d=0; d < mxDays; d++){
        for(int i=0; i<n; i++){
            if(dp[d][i] != -1){
                //cout << d << ' ' << i << "\n";
                for(int u: adj[i]){
                    dp[d+1][u] = max(dp[d+1][u], dp[d][i] + earn[u]);
                }
            }
        }
        ans = max(ans, dp[d][0] - c * d * d);
    }
    cout << ans;
    return 0;
} 
/*my own solution.. First I tried to make it recursive but it didn't go right..
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <int> vi;
typedef pair <int,int> pi;
#define pb push_back
#define f first
#define s second
#define OO INT_MAX
#define all(x) (x).begin(), (x).end()
#define no cout << "NO\n"
#define yes cout << "YES\n"

const int N = 1e3+10, k = 255;
int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("time.in", "r", stdin);
    freopen("time.out", "w", stdout);     
    int n, m, c; cin >> n >> m >> c;
    int a[N];
    vi adj[N];
    for(int i=1; i<=n; ++i) cin >> a[i];
    for(int i=0; i<m; ++i){
        int a, b; cin >> a >> b;
        adj[a].pb(b);
    }
    vector <vi> dp(n+1, vi(k, -1));
    int ans=0;
    dp[1][0] = 0;
    for(int t=0; t<k; ++t){
        for(int i=1; i<=n; ++i){
            if(dp[i][t] != -1){
                for(int &u: adj[i]){
                    dp[u][t+1] = max(dp[u][t+1], a[i]+dp[i][t]);
                }
            }
        }
        ans = max(ans, dp[1][t]-c*t*t);
    }
    cout << ans;
    return 0;       
}   */
