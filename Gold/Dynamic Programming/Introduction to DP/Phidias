#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 
#define f first
#define s second

int maxn = 600;

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    //freopen("snakes.in", "r", stdin);
    //freopen("snakes.out", "w", stdout);

    int w, h; cin >> w >> h;
    int n; cin >> n;
    vector <pair<int,int>> v(n);
    for(int i=0; i<n; i++){
        cin >> v[i].f >> v[i].s;
    }

    vector <vector<int>> dp(maxn+1, vector<int> (maxn));
    //dp[i][j] = min waste space for a rectangle of size i*j.
    for(int i=1; i<=w; i++){
        for(int j=1; j<=h; j++){
            dp[i][j] = i*j;
        }
    }
    for(int i=0; i<n; i++){
        dp[v[i].f][v[i].s] = 0;
    }

    for(int i=1; i <= w; i++){
        for(int j=1; j<= h; j++){
            for(int x=1; x <= i; x++){
                dp[i][j] = min(dp[i][j], dp[i-x][j] + dp[x][j]);
            }
            
            for(int y=1; y <= j; y++){
                dp[i][j] = min(dp[i][j], dp[i][j-y] + dp[i][y]);
            }
        }
    }
   
    cout << dp[w][h] ;
    return 0;
}  
/* My own solution...
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <ll> vi;
typedef pair <int,int> pi;
#define pb push_back
#define f first
#define s second
#define OO 1e9
#define all(x) (x).begin(), (x).end()
#define no cout << "NO\n"
#define yes cout << "YES\n"
 
const int N = 610;
int main() {
    // ios::sync_with_stdio(0); cin.tie(0);
    // freopen("snakes.in", "r", stdin);
    // freopen("snakes.out", "w", stdout);
    int W, H; cin >> W >> H;
    int n; cin >> n;
    vector <vi> dp(N, vi(N));
    for(int i=0; i<N; ++i){
        for(int j=0; j<N; ++j) dp[i][j] = i*j;
    }
    for(int i=0; i<n; ++i){
        int x,y; cin >> x >> y;
        dp[x][y] = 0;
    }
    for(int w=1; w<=W; ++w){
        for(int h=1; h<=H; ++h){
            for(int y=0; y<=h; ++y){
                dp[w][h] = min(dp[w][h], dp[w][y] + dp[w][h-y]);
            }
            for(int x=0; x<=w; ++x){
                dp[w][h] = min(dp[w][h], dp[x][h] + dp[w-x][h]);
            }
            // cout << dp[w][h] << " ";
        }
        // cout << "\n";
    }
    cout << dp[W][H];
    return 0;       
}   */
