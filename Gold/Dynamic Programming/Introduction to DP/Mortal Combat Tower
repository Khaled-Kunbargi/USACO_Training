#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 

const int MOD = 1e9+7;

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    //freopen("feast.in", "r", stdin);
    //freopen("feast.out", "w", stdout);

    int t; cin >> t;
    while(t--){
    //Push DP
        int n; cin >> n;
        bool a[n];
        for(int i=0; i<n; i++) cin >> a[i];

        vector <vector <int>> dp(2, vector<int>(n+1, 1e9));

        dp[1][0] = 0;
        for(int j=0; j<n; j++){
            dp[0][j+1] = min(dp[0][j+1], dp[1][j] + a[j]);
            dp[1][j+1] = min(dp[1][j+1], dp[0][j]);
            
            if(j + 2 <= n){
                dp[0][j+2] = min(dp[0][j+2], dp[1][j] + a[j] + a[j+1]);
                dp[1][j+2] = min(dp[1][j+2], dp[0][j]);
            }
        }
        cout << min(dp[1][n], dp[0][n]) << "\n";

    //Pull DP
    int n; cin >> n;
        bool a[n];
        for(int i=0; i<n; i++) cin >> a[i];

        vector <vector <int>> dp(n+1, vector<int> (2, 1e9));

        dp[0][0] = 0;
        for(int i=1; i<=n; i++){
            dp[i][0] = min(dp[i][0], dp[i-1][1]);
            dp[i][1] = min(dp[i][1], dp[i-1][0] + a[i-1]);

            if(i > 1){
                dp[i][0] = min(dp[i][0], dp[i-2][1]);
                dp[i][1] = min(dp[i][1], dp[i-2][0] + a[i-1] + a[i-2]);
            }
        }
        cout << min(dp[n][0], dp[n][1]) << "\n";
    }

    return 0;
} 
