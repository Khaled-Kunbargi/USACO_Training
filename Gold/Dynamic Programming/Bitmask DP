#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 
typedef vector <int> vi;
#define pb push_back

const int mod = 1e9+7, N=2e6;
ll fact[N+1], inv[N+1];

ll exp(ll b, ll p){
    ll m= mod;
    b %= m;
    ll res = 1;
    while(p > 0){
        if(p & 1) res = res * b %m;
        b = b * b % m;
        p /= 2;
    }
    return res;
}
ll mod_inv(ll x){return exp(x, mod-2);}
ll choose(ll n, ll k){
    return fact[n] * inv[k] % mod * inv[n-k] % mod;
}

int dp[1 << 20][20];

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    //freopen("cowpatibility.in", "r", stdin);
    //freopen("cowpatibility.out", "w", stdout);

    int n, m; cin >> n >> m;
    vector <vi> adj(n);
    for(int i=0; i<m; i++){
        int a, b; cin >> a >> b;
        adj[--b].pb(--a);
    }

    dp[1][0] = 1;
    for(int s=2; s < (1 << n); s++){
        //only consider subsets that have city 1.
        if((s & (1 << 0)) == 0) continue;
        //only consider subsets with the last city if it is the full subset.
        if(s & (1 << (n-1)) && s != (1 << n)-1) continue;

        for(int end=0; end < n; end++){
            if((s & (1 << end)) == 0) continue;
            
            int prev = s - (1 << end);
            for(int j: adj[end]){
                if(s & (1 << j)){
                    dp[s][end] += dp[prev][j];
                    dp[s][end] %= mod;
                }
            }
        }
    }
    cout << dp[(1 << n)-1][n-1];

    return 0;
}  
