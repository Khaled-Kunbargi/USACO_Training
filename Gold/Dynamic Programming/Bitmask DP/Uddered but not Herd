#include <bits/stdc++.h>
using namespace std;
// #define int long long
#define pi pair<int,int>
#define vi vector<int>
#define rep(i,x,n) for(int i=x; i<n; ++i)
#define For(i,n) rep(i,0,n)
#define endl "\n"
#define sp ' '
#define pb push_back
#define f first
// #define s second
#define sz size()
#define all(x) (x).begin(),(x).end()
 
const int N = 1e5+10, OO = 1e9, mod = 1e9+7, mx = 20;
const int dx[]{0,1}, dy[]{1,0};
void tr(int a, int b){cout << a << sp << b << endl;}
void cmx(int &a, int b){a = max(a,b);}
void cmn(int &a, int b){a = min(a,b);}

int a[N], mp[mx], dp[1<<mx],adj[mx][mx];
string al;
/*
babcdcadabca
ans = 5.
dp[a] =  
dp[b,c] = 3
*/
int32_t main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    // freopen("talent.in", "r", stdin);
    // freopen("talent.out", "w", stdout);
    string b; cin >> b;
    al = b;
    sort(all(al)); al.erase(unique(all(al)),end(al));
    int n = b.sz;
    For(i,n){
        For(j,al.sz) if(al[j]==b[i]) a[i] = j;
        mp[a[i]]++;
    }    
    For(i,n-1) adj[a[i]][a[i+1]]++;
    For(i,al.sz){
        dp[1<<i] = adj[i][i];
    }
    for(int msk=1; msk < 1<<al.sz; ++msk){
        if(__builtin_popcount(msk)==1) continue;
        dp[msk] = OO;
        For(i,al.sz) if((1<<i) & msk){
            int c = 0;
            For(j,al.sz) if((1<<j)&msk) {
                c += adj[i][j];
            }
            cmn(dp[msk], dp[msk-(1<<i)]+c);
        }
    }
    cout << dp[(1<<al.sz)-1]+1 << endl;
    return 0;
}
/*
Just some notices : 
I believe you can do it !
You've done things that were harder ... 
Stay calm and focused  =)
*/
