#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 

const int MOD = 1e9+7, K = 5e3;

int main() {
    //ios::sync_with_stdio(0); cin.tie(0);
    //freopen("poetry.in", "r", stdin);
    //freopen("poetry.out", "w", stdout);

    int n, x; cin >> n >> x;
    int s[n];
    for(int i=0; i<n; i++) cin >> s[i]; //skill

    sort(s, s+n);

    vector <vector <ll>> dp1(n+2, vector<ll>(x+K+1)), dp2(n+2, vector<ll>(x+K+1));
    //dp[i][j][k]: max ways of splitting the coders for the first i coders,
    //with j unfinished groups, and with k the total penalty till now.

    dp1[0][K] = 1;
    for(int i=0; i<n; i++){
        for(int j=0; j <= (n-i); j++){
            for(int k=0; k <= x+K; k++){
                if(!dp1[j][k]) continue;

                //cout << j << ' ' << k << "\n";
                dp2[j][k] += dp1[j][k]; //make new single group.

                //finish group
                if(j && k + s[i] <= x+K)
                    dp2[j-1][k+s[i]] += j * dp1[j][k];
                
                //Extend unfinished group.
                if(j <= (n-(i+1)))
                    dp2[j][k] += j * dp1[j][k];

                //Start new unfinished group.
                if(j + 1 <= (n-(i+1)))
                    dp2[j+1][k - s[i]] += dp1[j][k];

            }
        }

        for(int j=0; j <= (n-(i+1)); j++){
            for(int k=0; k<=x+K; k++){
                dp1[j][k] = dp2[j][k] % MOD;
                dp2[j][k] = 0;
            }
        }
    }

    ll ans=0;
    for(int k=K; k <= x+K; k++){
        ans += dp1[0][k];
        ans %= MOD;
    }
    cout << ans;
    return 0;
}  
