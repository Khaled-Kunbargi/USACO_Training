#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <int> vi;
typedef pair <int,int> pi;
#define pb push_back
#define f first
#define s second
#define OO 1e18
#define all(x) (x).begin(), (x).end()
#define no cout << "NO\n"z
#define yes cout << "YES\n"
/* It's unintuitive but here is the idea :
  Minimum number of increasing subsequences that cover an array A is:
  the size of the LONGEST NON-INCREASING SUBSEQUENCE..
*/
const int m = 1e9+7,N =2e5+10;    
int n;
int Lnis(vi &a){
    reverse(all(a));
    multiset <int> ms;
    int ans=0;
    for(int i=0; i<n; ++i){
        auto j = ms.upper_bound(a[i]);
        if(j == ms.end()){
            ms.insert(a[i]);
            ans++;
        }else{
            ms.erase(j);
            ms.insert(a[i]);
        }
    }
    return ans;
}
int main() {    
    ios::sync_with_stdio(0); cin.tie(0);
    // freopen("nocross.in", "r", stdin);
    // freopen("nocross.out", "w", stdout);  
    cin >> n; 
    vector <pi> v(n);
    for(auto &i: v) cin >> i.f >> i.s;
    sort(all(v));
    vi a;
    for(auto i: v){
        a.pb(i.s);
    }
    cout << Lnis(a);
    return 0;     
}
/* stuff you should look for
    * visualize !
	* int overflow, array bounds
	* special cases (n=1?), slow multiset operations
    * reversing the problem
	* do smth instead of nothing and stay organized
*/
