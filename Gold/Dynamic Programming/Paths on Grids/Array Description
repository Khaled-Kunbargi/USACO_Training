#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 

//If we tried to use Combinatorics with some greedy approach. We'll gonna need Inclusion Exclusion.

const int MOD = 1e9+7;
int dp[100000][101];

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    //freopen("hps.in", "r", stdin);
    //freopen("hps.out", "w", stdout);
    int n, m; cin >> n >> m;
    int x; cin >> x;

    if(x == 0){
        fill(dp[0], dp[0] + 101, 1);
    }else{
        dp[0][x] = 1;
    }

    for(int i=1; i<n; i++){
        cin >> x;
        if(x == 0){
            for(int j=1; j<=m; j++){
                for(int k: {j-1, j, j+1}){
                    if(k >= 1 && k <= m)
                    dp[i][j] = (dp[i][j] + dp[i-1][k]) % MOD;
                }
            }
        }else{
            for(int j: {x-1, x, x+1}){
                if(j >= 0 && j <= m)
                dp[i][x] = (dp[i][x] + dp[i-1][j]) % MOD;
            }
        }
    }
    int ans=0;
    for(int i=1; i<=m; i++){
        ans = (ans + dp[n-1][i])%MOD;
    }
    cout << ans;
    return 0;
} 
