#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <int> vi;
typedef pair <ll,int> pi;
#define pb push_back
#define f first
#define s second
#define OO INT_MAX
#define all(x) (x).begin(), (x).end()

const int mod = 1e9+7;
struct DSU {
    vi p, r;
    int n, groups;
    void init(int n){ this->n = n; 
        p.resize(n); r.resize(n);
        groups = n;
        for(int i=0; i<n; i++) p[i] = i;
    }
    int get(int a){ return p[a] = (p[a] == a ? a: get(p[a])); }
    bool same_set(int a, int b){return get(a) == get(b);}
    void unite(int a, int b){
        a = get(a), b = get(b);
        if(a == b) return;
        groups--;
        if(r[a] == r[b])
            r[a]++;
        if(r[b] > r[a]) swap(a, b);
        p[b] = a;           
    }
} dsu;
struct item {
    int a, b, w;
};
bool cmp(const item &a, const item &b){
    return a.w < b.w;
}
int main() {
    // ios::sync_with_stdio(0); cin.tie(0);
    // freopen("bphoto.in", "r", stdin);
    // freopen("bphoto.out", "w", stdout);    
    int n, m; cin >> n >> m;
    vector <item> edges;
    for(int i=0; i<m; ++i){
        int a, b, w; cin >> a >> b >> w;
        edges.pb({--a, --b, w});
        edges.pb({b, a, w});
    }
    sort(all(edges), cmp);
    dsu.init(n);
    ll sum=0;
    for(auto &[a,b,w]: edges){
        if(!dsu.same_set(a, b)){ dsu.unite(a, b); sum += w;}
    }
    if(dsu.groups > 1) cout << "IMPOSSIBLE\n";
    else cout << sum;
    return 0;   
}
