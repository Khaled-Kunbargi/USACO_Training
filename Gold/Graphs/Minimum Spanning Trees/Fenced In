#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <int> vi;
typedef pair <int,int> pi;
#define pb push_back
#define f first
#define s second
#define OO INT_MAX
#define all(x) (x).begin(), (x).end()

struct item {
    int w, a, b;
};
struct DSU {
    vi p, r;
    int n;
    void init(int n){ this->n = n; 
        p.resize(n); r.resize(n);
        for(int i=0; i<n; i++) p[i] = i;
    }
    int get(int a){ return p[a] = (p[a] == a ? a: get(p[a])); }
    bool same_set(int a, int b){return get(a) == get(b);}
    void unite(int a, int b){
        a = get(a), b = get(b);
        if(a == b) return;
        if(r[a] == r[b])
            r[a]++;
        if(r[b] > r[a]) swap(a, b);
        p[b] = a;           
    }
} dsu;
bool cmp(const item &a, const item &b){return a.w < b.w;}
int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("fencedin.in", "r", stdin);
    freopen("fencedin.out", "w", stdout);    
    int A, B, n, m; cin >> A >> B >> n >> m;
    vi a(n+1), b(m+1);
    for(int i=1; i<=n; ++i) cin >> a[i];
    for(int i=1; i<=m; ++i) cin >> b[i];
    a.pb(B); b.pb(A);
    sort(all(a)); sort(all(b));
    vector <item> edges;
    n+=2; m+=2;
    /*
    1 2 3
    4 5 6
    */
    int cur_sec = 1;
    for(int i=1; i<n; ++i){
        int init = cur_sec;
        for(int row=0; row < m-2; ++row){
            row += cur_sec;
            edges.pb(item{a[i]-a[i-1], row, row+n-1});
            row -= cur_sec;
            cur_sec += (n-1);
        }
        cur_sec = init;
        cur_sec++;
    }
    cur_sec = 1;
    for(int i=1; i<m; ++i){
        for(int col=0; col < n-2; ++col){
            col += cur_sec;
            edges.pb(item{b[i]-b[i-1],col,col+1});
            col -= cur_sec;
        }
        cur_sec += n-1;
    }
    sort(all(edges), cmp);
    dsu.init((n+2)*(m+2));
    ll ans = 0;
    for(auto &[w, a, b]: edges){
        if(!dsu.same_set(a, b)){dsu.unite(a, b); ans += w;}
    }
    cout << ans;
    return 0;   
}
