#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <ll> vi;
typedef pair <ll,ll> pi;
#define pb push_back
#define f first
#define s second
#define OO 1e9
#define all(x) (x).begin(), (x).end()

const int maxn=100000;
vi adj[maxn];
int vis[maxn], has_cycle=0;
deque <int> topo_sort;

void dfs(int node){
    vis[node] = 1;
    for(auto i: adj[node]){
        if(!vis[i]) dfs(i);
        else if(vis[i] == 1) has_cycle = 1;
    }
    vis[node]++;
    topo_sort.push_front(node);
}

int main() {
    // ios::sync_with_stdio(0); cin.tie(0);
    // freopen("dining.in", "r", stdin);
    // freopen("dining.out", "w", stdout);    
    int n, m; cin >> n >> m;
    for(int i=0; i<m; ++i){
        int a, b; cin >> a >> b;
        adj[--a].pb(--b);
    }
    for(int i=0; i<n; i++) if(!vis[i]){ dfs(i);}
    if(has_cycle){cout << "IMPOSSIBLE\n"; return 0;}
    for(auto i: topo_sort ) cout << i+1 << " ";

    //BFS version: Kahn's algorithm..
    int main() {
    // ios::sync_with_stdio(0); cin.tie(0);
    // freopen("dining.in", "r", stdin);
    // freopen("dining.out", "w", stdout);    
    int n, m; cin >> n >> m;
    vi indegree(n);
    for(int i=0; i<m; ++i){
        int a, b; cin >> a >> b;
        adj[--a].pb(--b);
        indegree[b]++;
    }
    queue <int> q;
    for(int i=0; i<n; i++)if(indegree[i]==0) q.push(i);
    vi order;
    while(!q.empty()){
        int cur = q.front(); q.pop();
        order.pb(cur);
        for(int nxt: adj[cur]){
            indegree[nxt]--;
            if(indegree[nxt]==0) q.push(nxt);
        }
    }
    if(order.size() != n){ cout << "IMPOSSIBLE\n"; return 0;}
    for(auto i: order) cout << i+1 << " ";
    return 0;
}
    return 0;
}
