#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <ll> vi;
typedef pair <ll,ll> pi;
#define pb push_back
#define f first
#define s second
#define OO 1e9
#define all(x) (x).begin(), (x).end()

const int N = 100;
int dx[]{0,0,1,-1, 0, 1, 2, 3, 0, 1, 2, -1, -2, -3, -1, -2};
int dy[]{1,-1,0,0, 3, 2, 1, 0,-3,-2,-1, 2, 1, 0, -2, -1};
int n;
int a[N][N];

bool inside(int x, int y){
    return x >=0 && y >=0 && x<n && y<n;
}
struct item {
    int d, x, y;
    bool operator<(const item &z) const { return d < z.d; }
};

int main() {
    // ios::sync_with_stdio(0); cin.tie(0);
    // freopen("visitfj.in", "r", stdin);
    // freopen("visitfj.out", "w", stdout);
    
    int t; cin >> n >> t;
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++) cin >> a[i][j];
    }
    
    vector <vi> d(n, vi(n, OO));
    priority_queue <item> pq;
    pq.push({0, 0, 0}); d[0][0] = 0;
    while (!pq.empty()){
        const auto [cur_d, x, y] = pq.top();  pq.pop();
        if(d[x][y] < -cur_d) continue;
        if(x == n-1 && y == n - 1) break;
        for(int k=0; k<16; k++){
            int u = x+dx[k], v = y+dy[k];
            if(!inside(u, v)) continue;
            int new_dist = d[x][y] + 3*t + a[u][v];
            if(new_dist < d[u][v]){
                pq.push((item){-new_dist, u, v});
                d[u][v] = new_dist;
            }
        }

        int manhatan = n-1-x+n-1-y;
        if(manhatan < 3){
            d[n-1][n-1] = min(d[n-1][n-1], d[x][y] + manhatan * t);
        }
    }
    cout << d[n-1][n-1];
    return 0;
}
