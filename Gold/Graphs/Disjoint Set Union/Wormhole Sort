#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <ll> vi;
typedef pair <ll,ll> pi;
#define pb push_back
#define f first
#define s second
#define OO 1e9
#define all(x) (x).begin(), (x).end()

struct DSU {
    vi p, r;
    int n, c;
    void init(int n){ this->n = n; 
        p.resize(n); r.resize(n);
        for(int i=0; i<n; i++) p[i] = i;
    }

    int get(int a){ return p[a] = (p[a] == a ? a: get(p[a])); }

    bool same_set(int a, int b){return get(a) == get(b);}

    void unite(int a, int b){
        a = get(a), b = get(b);
        if(a == b) return;
        if(r[a] == r[b])
            r[a]++;
        if(r[b] > r[a]) swap(a, b);
        p[b] = a;           
    }
} dsu;

struct item {
    int w, a, b;
};

bool cmp(const item &a, const item &b){
    return a.w > b.w;
}

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("wormsort.in", "r", stdin);
    freopen("wormsort.out", "w", stdout);

    int n, m; cin >> n >> m;
    int p[n];
    for(int i=0; i<n; i++){ cin >> p[i]; p[i]--; }
    bool sorted = 1;
    for(int i=0; i<n; i++){
        if(p[i] != i){sorted =0; break;}
    }
    if(sorted){ cout << -1; return 0;}
    vector <item> edges(m);
    for(int i=0; i<m; i++){
        int a, b, w; cin >> a >> b >> w;
        edges[i] = {w, --a, --b};
    }
    sort(all(edges), cmp);
    dsu.init(n);
    for(const auto &[w, a, b]: edges){
        dsu.unite(a, b);
        bool ok = 1;
        for(int i=0; i<n; i++){
            if(dsu.get(i) != dsu.get(p[i])){ ok = 0; break;}
        }
        if(ok){ cout << w << "\n"; break;}
    }
    return 0;
}
