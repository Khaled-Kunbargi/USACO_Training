
//DFS with binary search solution:
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <ll> vi;
typedef pair <ll,ll> pi;
#define pb push_back
#define f first
#define s second
#define OO 1e9
#define all(x) (x).begin(), (x).end()

struct DSU {
    vi p, r;
    int n, c;
    void init(int n){ this->n = n; 
        p.resize(n); r.resize(n);
        for(int i=0; i<n; i++) p[i] = i;
    }

    int get(int a){ return p[a] = (p[a] == a ? a: get(p[a])); }

    bool same_set(int a, int b){return get(a) == get(b);}

    void unite(int a, int b){
        a = get(a), b = get(b);
        if(a == b) return;
        if(r[a] == r[b])
            r[a]++;
        if(r[b] > r[a]) swap(a, b);
        p[b] = a;           
    }
} dsu;

ll dist(pi a, pi b){
    ll x = (ll) pow(b.f-a.f, 2) + (ll) pow(b.s-a.s, 2);
    return x;
}

int n;
vi vis;
void dfs(int node, vector<vi> &adj){
    if(vis[node]) return;
    vis[node] = 1;
    for(auto i: adj[node]) dfs(i, adj);
}

bool dfs(vector <vi> &adj){
    vis.assign(n, 0);
    dfs(0, adj);
    for(int i=0; i<n; i++){
        if(!vis[i]) return false;
    }
    return true;
}

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("moocast.in", "r", stdin);
    freopen("moocast.out", "w", stdout);

    cin >> n;
    vector <pi> v(n);
    for(int i=0; i<n; i++) cin >> v[i].f >> v[i].s;
    
    ll l=0, r=1e9;
    while(r > l+1){
        ll m = (l+r)/2;
        vector <vi> adj(n);
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(dist(v[i], v[j]) <= m){
                    adj[i].pb(j);
                    adj[j].pb(i);
                }
            }
        }
        if(dfs(adj)) r = m;
        else {
            l = m;
        }
    }
    cout << r;
    return 0;
}
