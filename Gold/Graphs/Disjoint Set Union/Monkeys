#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <ll> vi;
typedef pair <ll,ll> pi;
#define pb push_back
#define f first
#define s second
#define OO 1e9
#define all(x) (x).begin(), (x).end()

vi vis, ans;

struct DSU {
    vi p, r;
    vector <vi> children;
    int n;
    void init(int n){ this->n = n; p.resize(n); r.resize(n);
        children.resize(n);
        for(int i=0; i<n; i++) children[i].pb(i);
        for(int i=0; i<n; i++) p[i] = i;
    }

    int get(int a){ return (p[a] == a ? a: get(p[a])); }

    bool same_set(int a, int b){return get(a) == get(b);}

    void unite(int a, int b, int sec = -1){
        a = get(a), b = get(b);
        if(a == b) return;
        if(r[a] == r[b])
            r[a]++;
        if(r[b] > r[a]) swap(a, b);
        if(b == 0) swap(a, b);
        p[b] = a;            
        if(a == 0){
            for(auto i: children[b]) ans[i] = sec;
        }else for(auto i: children[b]) children[a].pb(i);
    }
} dsu;

vector <pi> adj;

void dfs(int node){
    if(vis[node]) return;
    vis[node] = 1;
    int l = adj[node].f, r = adj[node].s;
    if(l >= 0){ 
        dsu.unite(node, l);
        dfs(l);
    }
    if(r >= 0){ 
        dsu.unite(node, r);
        dfs(r);
    }
}

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    // freopen("atlarge.in", "r", stdin);
    // freopen("atlarge.out", "w", stdout);

    int n, m; cin >> n >> m;
    adj.resize(n); ans.assign(n, -1);
    for(int i=0; i<n; i++){
        int a, b; cin >> a >> b;
        adj[i].f = --a;
        adj[i].s = --b;
    }
    vector <pi> v(m);
    for(int i=0; i<m; i++){
        int a, b; cin >> a >> b;
        v[i].f = --a, v[i].s = (b == 1 ? adj[a].f : adj[a].s);
        if(b == 1) adj[a].f = -1;
        else adj[a].s = -1;
    }
    dsu.init(n); vis.assign(n, 0);
    for(int i=0; i<n; i++){
        if(!vis[i]) dfs(i);
    }
    reverse(all(v));
    for(int i=0, t=m-1; i<m; i++, t--){
        dsu.unite(v[i].f, v[i].s, t);
    }
    for(int i=0; i<n; i++) cout << ans[i] << "\n";
    return 0;
}
