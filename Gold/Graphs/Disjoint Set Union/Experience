#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector <ll> vi;
typedef pair <ll,ll> pi;
#define pb push_back
#define f first
#define s second
#define OO 1e9
#define all(x) (x).begin(), (x).end()

//can't do path compression because we need the structure of the tree.

struct DSU {
    vi p, r, _score, extra;
    int n;
    void init(int n){ this->n = n; p.resize(n); r.resize(n);
        _score.assign(n, 0); extra.assign(n, 0);
        for(int i=0; i<n; i++) p[i] = i;
    }

    int get(int a){ return (p[a] == a ? a: get(p[a])); }

    bool same_set(int a, int b){return get(a) == get(b);}

    void unite(int a, int b){
        a = get(a);
        b = get(b);
        if(a == b) return;
        if(r[a] == r[b])
            r[a]++;
        //always assume that a is bigger.
        if(r[b] > r[a]) swap(a,b);
        p[b] = a;
        extra[b] = _score[a];
    }

    void add(int x, int v){
        x = get(x);
        _score[x] += v;
    }

    int score(int x){
        return (p[x] == x ?_score[x]: _score[x] - extra[x] + score(p[x]));
    }   
};
int main() {
     ios::sync_with_stdio(0); cin.tie(0);
    // freopen("atlarge.in", "r", stdin);
    // freopen("atlarge.out", "w", stdout);

    int n, m; cin >> n >> m;
    DSU dsu;
    dsu.init(n);
    for(int i=0; i<m; i++){
        string type; cin >> type;
        int a, b;
        if(type == "join"){
            cin >> a >> b;
            dsu.unite(--a, --b);
        }else if(type == "add"){
            cin >> a >> b;
            dsu.add(--a, b);
        }else{
            cin >> a;
            cout << dsu.score(--a) << "\n";
        }
    }
    return 0;
}
