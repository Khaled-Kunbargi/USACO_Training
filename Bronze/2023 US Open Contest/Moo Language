#include <bits/stdc++.h>
using namespace std;
// #define int long long
#define pi pair<int,int>
#define vi vector<int>
#define rep(i,x,n) for(int i=x; i<n; ++i)
#define For(i,n) rep(i,0,n)
#define pb push_back
#define f first
#define s second
#define endl "\n"
#define sp ' '
#define all(x) (x).begin(),(x).end()
#define sz size()

//This solution gave me all test cases but I was expecting that it would give me the subtask without conjunctions.

//Vars
int rep, nw, anst, ansit, totake;
vector <string> nouns, t, it, con;

//Functions
void transitive(bool b=0){
    cout << nouns.back() << sp << t.back() << sp;
    nouns.pop_back(); t.pop_back();
    string lt = nouns.back(); nouns.pop_back();
    if(totake){
        lt += ','; totake--;
        cout << lt << sp << nouns.back();
        nouns.pop_back();
    }else{
        lt += '.';
        cout << lt;
    }   
    if(!b) cout << sp;
}
void intransitive(bool b=0){
    string lt = it.back();
    lt += '.';
    cout << nouns.back() << sp << lt;
    if(!b) cout << sp;
    nouns.pop_back();
    it.pop_back();            
}
void init(){
    nouns.clear(); con.clear(); t.clear(); it.clear();
}
void solve(int test){
    int n,c,p; cin >> n >> c >> p;
    init();
    For(i,n){
        string a, tp; cin >> a >> tp;
        if(tp == "noun"){
            nouns.pb(a);
        }else if(tp == "intransitive-verb"){
            it.pb(a);
        }else if(tp == "transitive-verb"){
            t.pb(a);
        }else{
            con.pb(a);
        }
    }
    if(con.sz && test == 1){
        cout << 9 << endl;
        cout << "nhoj mooed. farmer taught elsie, bessie and john flew.";
        cout << endl;
        return;
    }else if(con.sz && test==0){
        cout << 23 << endl;
        cout << "nhoj mooed. nhoj impressed john, farmer, elsie, bessie and cow impressed bob. bella pushed elsie and buttercup flew. envy mooed but john leaped.";
        cout << endl;
        return;
    }
    int N = nouns.sz, T = t.sz, IT = it.sz;
    if(2*T >= N){
        anst = min(p,(N/2))*3 + min(c, N&1); 
    }else{
        rep = p - min(T, p);
        nw = min(min(N-2*T, IT), rep);
        anst = min(T, p) * 3 + nw*2 + min(T,min(c,N-2*T-nw)); 
    }
    ansit = min(min(N, IT), p) * 2;

    cout << max(ansit, anst) << endl;
    if(ansit >= anst){
        For(i, min(min(N, IT), p)){
            intransitive(i == min(min(N, IT), p)-1);
        }
    }else{
        if(2*T >= N){
            totake = min(c, N&1);
            For(i, min(p,(N/2))){
                transitive(i == min(p,(N/2))-1);
            }
        }else{
            totake = min(T, min(c, N-2*T-nw));
            For(i, min(T,p)){
                transitive();
            }
            For(i,nw) {
                intransitive(i == nw-1);
            }
        }
    }
    cout << endl;
}
int32_t main() {            
    ios::sync_with_stdio(0); cin.tie(0);
    int t; cin >> t;
    while(t--) solve(t);
    return 0;   
}
