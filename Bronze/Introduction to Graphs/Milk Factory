#include <bits/stdc++.h>
using namespace std;
 
bitset <128> bt;
map <int,vector <int>> adj;

void DFS(int node, int pa){
    for(auto i: adj[node]){
        if(i != pa){
            bt[i] = 1;
            DFS(i, node);
        }
    }
}

int main(){
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("factory.out", "w", stdout);
    freopen("factory.in", "r", stdin);
    int n; cin >> n;
    for(int i=0; i<n-1; i++){
        int x, y; cin >> x >> y;
        adj[x].push_back(y);
    }
    vector <bitset<128>> v(n+1);
    for(int i=1; i<=n; i++){
        DFS(i, -1);
        bt[i] = 1;
        v[i] = bt;
        bt &= 0;
    }
    bitset <128> res;
    res.set();
    for(int i=1;i<=n; i++){
        res &= v[i];
    }
    if(res.count() == 0) cout << "-1\n";
    else{
        for(int i=1; i<=n; i++){
            if(res[i] == 1){ 
                cout << i << "\n";
                break;
            }
        }
    }
    return 0;
}
