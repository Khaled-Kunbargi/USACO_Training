#include <bits/stdc++.h>
using namespace std;

int main(){
    ios::sync_with_stdio(0); cin.tie(0);
    //freopen("hoofball.in", "r", stdin);
    //freopen("hoofball.out", "w", stdout);

    int n; cin >> n;
    string s; cin >> s;

    vector <int> pos;
    for(int i=0; i<n; i++){
        if(s[i] == 'F') pos.push_back(i);
        while(s[i] == 'F'){
            i++;
        }
    }
    int initial = 0;
    for(int i=0; i<n-1; i++){
        if(s[i] == 'F') continue;
        if(s[i] == s[i+1]) initial++;
    }
    int mn = initial, mx = initial;
    for(auto i: pos){
        int l = i > 0 ? i-1: 0;
        int r = i;
        while(s[r] == 'F' && r < n) r++;
        if(r == n) r--;

        int length = r-l+1;
        if(length & 1){ 
            if(s[r] == s[l]){ //like EFFFE
                mx += length-1;
                mn += 0;
            }else if(s[l] != 'F' && s[r] != 'F'){ // EFFFB
                mx += length-2;
                mn += 1;
            }
        }else{
            if(s[r] == s[l]){ //EFFE
                mx += length-1;
                mn += 1;
            }else if(s[l] != 'F' && s[r] != 'F'){ //EFFB
                mx += length-2;
                mn += 0;
            }
        }
    }

    int leadingF = 0, trailingF = 0;
    while(leadingF < n && s[leadingF] == 'F') leadingF++;
    while(trailingF < n && s[n-trailingF-1] == 'F') trailingF++;

    if(leadingF == n){
        mn = 0;
        mx = n-1;
    }else{
        mx += leadingF;
        mx += trailingF;
    }
    vector <int> possible_values;
    if(leadingF == 0 && trailingF == 0){
        for(int i=mn; i<=mx; i+=2){
            possible_values.push_back(i);
        }
    }else{
        for(int i=mn; i<=mx; i++){
            possible_values.push_back(i);
        }
    }
    cout << possible_values.size() << "\n";
    for(auto i: possible_values){
        cout << i << "\n";
    }
    return 0;
}
