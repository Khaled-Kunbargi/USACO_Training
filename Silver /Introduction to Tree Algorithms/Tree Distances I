#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 

vector <vector<int>> adj;
int dist[2][200000];

int dfs(int node, int pa, int d, int i){
    dist[i][node] = d;
    int opt = -1;
    for(int v: adj[node]){
        if(v == pa) continue;
        int x = dfs(v, node, d+1, i);
        if(opt == -1 || dist[i][x] > dist[i][opt]) opt = x;
    }
    return opt == -1 ? node : opt;
}

int main(){
    //ios::sync_with_stdio(0); cin.tie(0);
    //freopen("milkvisits.in", "r", stdin);
    //freopen("milkvisits.out", "w", stdout);

    int n; cin >> n;
    adj.resize(n);
    for(int i=0; i<n-1; i++){
        int a, b; cin >> a >> b;
        adj[--a].push_back(--b);
        adj[b].push_back(a);
    }

    int mxNode = dfs(0, -1, 0, 0);
    int mxNode2 = dfs(mxNode, mxNode, 0, 0);
    
    dfs(mxNode2, mxNode2, 0, 1);

    for(int i=0; i<n; i++){
        cout << max(dist[0][i], dist[1][i]) << " ";
    }
    return 0;   
} 
