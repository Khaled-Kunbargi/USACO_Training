#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 

string s;
vector <vector<int>> adj;
vector <int> comp, vis;
int c=0;

void dfs(int node, char type){
    if(vis[node]) return;
    vis[node] = 1;
    comp[node] = c;
    for(auto i: adj[node]){
        if(s[i] == type){
            dfs(i, type);
        }
    }
}

int main(){
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("milkvisits.in", "r", stdin);
    freopen("milkvisits.out", "w", stdout);
    
    int n, m; cin >> n >> m;
    cin >> s;
    adj.resize(n); vis.resize(n); comp.resize(n);
    for(int i=0; i<n-1; i++){
        int a, b; cin >> a >> b;
        adj[--a].push_back(--b);
        adj[b].push_back(a);
    }

    for(int i=0; i<n ;i++){
        if(!vis[i]){ 
            dfs(i, s[i]);
            c++;
        }
    }

    for(int i=0; i<m; i++){
        int a, b; char type;
        cin >> a >> b >> type;
        a--, b--;
        if(comp[a] != comp[b]){
            cout << 1;
        }else if(s[a] == type){
            cout << 1;
        }else{
            cout << 0;
        }
    }
    return 0;   
} 
