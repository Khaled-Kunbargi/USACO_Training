#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define s second
#define f first
#define pb push_back

bool cmp (const pair<int,int> &a, const pair<int,int> &b){
    return a.s > b.s;
}

int m;
vector <int> milk, rent;
vector <pair<int,int>> store;
vector <ll> milk_amt;
vector <ll> cost;

unordered_map <ll, ll> memo;

ll calc(ll amount){
    if(memo[amount]) return memo[amount];
    int k = lower_bound(milk_amt.begin(), milk_amt.end(), amount) - milk_amt.begin();
    ll price = 0;
    if(k == m+1)
        return memo[amount] = cost[k-1];
    else{
        if(milk_amt[k] > amount && k != 1){
            price = cost[k-1];
            price += (cost[k]-cost[k-1]) / (milk_amt[k]-milk_amt[k-1]) * (amount-milk_amt[k-1]);
            return memo[amount] = price;
        }
        return memo[amount] = cost[k];
    }
}

int main(){
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("rental.in", "r", stdin);
    freopen("rental.out", "w", stdout);

    int n, r; cin >> n >> m >> r;
    milk.resize(n); rent.resize(r); store.resize(m);
    for(int i=0; i<n; i++) cin >> milk[i];
    for(int i=0; i<m; i++){
        cin >> store[i].f >> store[i].s;
    }
    for(int i=0; i<r; i++) cin >> rent[i];

    sort(milk.begin(), milk.end());
    sort(store.begin(), store.end(), cmp);
    sort(rent.rbegin(), rent.rend());

    vector <ll> suffix_sum(n+1, 0);
    for(int i=n-1; i>=0; i--){
        suffix_sum[i] = suffix_sum[i+1] + milk[i];
    }

    milk_amt.resize(m+1);
    cost.resize(m+1);
    for(int i=0; i<m; i++){
        milk_amt[i+1] = store[i].f + milk_amt[i];
        cost[i+1] = (ll) store[i].s * store[i].f + cost[i];
    }

    ll money = 0;
    for(int i=0; i<n; i++){
        ll c1 = 0, c2 = 0;
        c1 = calc(suffix_sum[i]); //all milk
        if(!rent.empty())
            c2 = calc(suffix_sum[i+1]) + *rent.begin(); // rent the current cow and milk the others
        if(c1 >= c2){
            money += c1;
            break;
        }else{
            money += *rent.begin();
            rent.erase(rent.begin());
        }
    }
    cout << money;
    return 0;
}
