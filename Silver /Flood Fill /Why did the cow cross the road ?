#include <bits/stdc++.h>
using namespace std;
typedef long long ll; 
const int maxn = 101;

int Ichange[]{1, 0, -1, 0};
int Jchange[]{0, 1, 0, -1};
map <pair<int,int>, vector<pair<int,int>>> adj;
int vis[maxn][maxn];
int n;

void flood_fill(int i, int j){
    if(i<0 || i>=n || j<0 || j>=n || vis[i][j]) return;

    vis[i][j] = 1;

    for(int k=0; k<4; k++){
        bool isroad = false;
        int nxt_i = i+Ichange[k], nxt_j = j+Jchange[k];
        for(auto &road: adj[{i, j}]){
            if(road.first == nxt_i && road.second == nxt_j){
                isroad = true;
                break;
            }
        }
        if(!isroad) flood_fill(nxt_i, nxt_j);
    }
}

int main(){
    ios::sync_with_stdio(0); cin.tie(0);
    freopen("countcross.in", "r", stdin);
    freopen("countcross.out", "w", stdout);
    
    int k, r; cin >> n >> k >> r;
    for(int i=0; i<n; i++){for(int j=0; j<n; j++) vis[i][j] = 0;}
    
    for(int i=0; i<r; i++){
        int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;
        x1--, x2--, y1--, y2--;
        adj[{x1, y1}].push_back({x2, y2});
        adj[{x2, y2}].push_back({x1, y1});
    }
    

    vector <pair<int,int>> v;
    for(int i=0; i<k; i++){
        int x, y; cin >> x >> y;
        v.push_back({--x, --y});
    }

    set <pair<int,int>> s;
    for(int i=0; i<k; i++){
        flood_fill(v[i].first, v[i].second);
        for(int j=0; j<k; j++){
            if(j == i) continue;
            int r = v[j].first, c = v[j].second;
            if(!vis[r][c]) s.insert({min(i, j), max(i, j)});
        }
        for(int i=0; i<n; i++){for(int j=0; j<n; j++) vis[i][j] = 0;}
    }
    cout << s.size();

    return 0;   
} 
